<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GraveWire.ai — Digital Necromancy</title>
  <meta name="description" content="GraveWire.ai — a gothic, multi-model AI assistant with personas, archives, and arcane configuration." />
  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&family=UnifrakturMaguntia&display=swap" rel="stylesheet">

  <!-- React & Babel (CDN, no bundlers) -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <style>
    :root {
      --bg: #0b0b14; /* deep navy/black */
      --surface: #111223;
      --panel: #151633;
      --panel-2: #181a3f;
      --text: #e9e7ff;
      --muted: #bdb8ff;
      --muted-2: #9490d4;
      --brand: #8b5cf6; /* violet */
      --brand-2: #a78bfa;
      --green: #22c55e;
      --danger: #ef4444;
      --shadow: 0 20px 60px rgba(139, 92, 246, .25);
      --radius: 16px;
      --ring: 0 0 0 2px rgba(167,139,250,.22), 0 10px 30px rgba(167,139,250,.28);
      --focus: 0 0 0 3px rgba(167,139,250,.45);
    }

    /* Theme presets */
    body.theme-gothic { }
    body.theme-kawaii { --brand: #ff7ad9; --brand-2:#ffd1f0; --panel:#241531; --panel-2:#2c1b3a; }
    body.theme-mono   { --brand:#9ca3af; --brand-2:#d1d5db; --text:#e5e7eb; --muted:#9ca3af; --muted-2:#6b7280; }
    body.theme-contrast { --bg:#000; --panel:#0b0b0b; --panel-2:#121212; --text:#fff; --brand:#8d5bff; --brand-2:#b094ff; }

    * { box-sizing: border-box; }
    html, body, #app { height: 100%; }
    body { margin:0; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji"; background: radial-gradient(1200px 600px at 75% -100px, rgba(139,92,246,.22), transparent), var(--bg); color: var(--text); }

    a { color: inherit; text-decoration: none; }
    button { font: inherit; }

    .brand-wordmark { font-family: "UnifrakturMaguntia", Inter, serif; letter-spacing: .5px; }

    /* Layout */
    .app-shell { display:flex; min-height:100%; }

    /* Sidebar (drawer style for mobile) */
    .sidebar { width: 320px; background: linear-gradient(180deg, #fff, #fafaff); color:#4b3f7f; border-right: 1px solid rgba(139,92,246,.2); box-shadow: 10px 0 30px rgba(0,0,0,.08); position: fixed; top:0; bottom:0; left:0; transform: translateX(-100%); transition: transform .25s ease; z-index: 40; }
    .sidebar.open { transform: translateX(0); }
    .sidebar-header { padding: 22px 22px 14px; display:flex; align-items:center; gap:12px; border-bottom: 1px solid rgba(139,92,246,.25); }
    .sidebar-header .logo { width:42px; height:42px; border-radius: 12px; background: radial-gradient(60% 60% at 30% 15%, var(--brand-2), var(--brand)); box-shadow: var(--ring); display:grid; place-items:center; }
    .sidebar-section { padding: 18px 22px; }
    .sidebar-section h4 { margin:0 0 8px; font-size: 12px; letter-spacing: .14em; color:#a78bfa; text-transform: uppercase; font-weight: 800; }
    .side-link { display:flex; align-items:center; gap:12px; padding:10px 12px; border-radius: 12px; color:#7770a8; }
    .side-link:hover { background:#f2f1ff; color:#5b518d; }
    .side-link.active { background: #efeaff; color:#4b3f7f; box-shadow: inset 0 0 0 1px rgba(139,92,246,.18); }
    .sidebar-user { margin-top:auto; border-top: 1px solid rgba(139,92,246,.25); padding:16px 22px; display:flex; align-items:center; gap:12px; }
    .sidebar-user .avatar { width:36px; height:36px; border-radius: 999px; background: radial-gradient(60% 60% at 20% 10%, var(--brand-2), var(--brand)); box-shadow: var(--ring); color:white; font-weight:800; display:grid; place-items:center; }

    /* Content frame */
    .content { flex:1; margin-left:0; display:flex; flex-direction:column; min-height:100vh; }
    .topbar { height:64px; display:flex; align-items:center; padding: 0 16px; gap:12px; }
    .hamburger { width:40px; height:40px; border-radius: 10px; background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03)); border: 1px solid rgba(255,255,255,.08); display:grid; place-items:center; cursor:pointer; }
    .brand { display:flex; align-items:center; gap:10px; margin-left: 4px; }
    .brand .glyph { width:30px; height:30px; border-radius:10px; background: radial-gradient(60% 60% at 30% 15%, var(--brand-2), var(--brand)); box-shadow: var(--ring); display:grid; place-items:center; }
    .brand-title { font-weight: 800; font-size: 18px; }
    .brand-sub { color: var(--muted); font-size: 12px; margin-top:-3px; }

    .page { padding: 16px; max-width: 980px; width: 100%; margin: 0 auto 80px; }

    /* Cards */
    .card { background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); border:1px solid rgba(255,255,255,.08); border-radius: var(--radius); box-shadow: var(--shadow); }
    .card-body { padding: 18px; }

    /* Persona Picker */
    .persona-grid { display:grid; grid-template-columns: 1fr; gap:14px; }
    .persona-card { display:flex; align-items:center; gap:14px; padding:16px; border-radius: 16px; border: 1px solid rgba(167,139,250,.28); background: linear-gradient(180deg, rgba(167,139,250,.08), rgba(255,255,255,.02)); cursor:pointer; position: relative; }
    .persona-card[aria-selected="true"] { box-shadow: 0 0 0 2px rgba(167,139,250,.4), 0 10px 40px rgba(167,139,250,.25); }
    .persona-icon { width:48px; height:48px; border-radius: 14px; background: radial-gradient(60% 60% at 30% 15%, var(--brand-2), var(--brand)); display:grid; place-items:center; box-shadow: var(--ring); }
    .persona-title { font-weight:800; font-size: 18px; }
    .persona-sub { color: var(--muted); }

    /* Chat */
    .composer { position: sticky; bottom: 0; background: linear-gradient(180deg, rgba(24,24,35,.0), rgba(10,10,18,.85) 60%); padding: 14px 0; backdrop-filter: blur(6px); }
    .composer-inner { display:flex; gap:10px; }
    .input { flex:1; padding: 14px 14px; border-radius: 12px; background: var(--panel); border:1px solid rgba(255,255,255,.08); color: var(--text); box-shadow: inset 0 0 0 1px rgba(167,139,250,.12); }
    .send { width:52px; border-radius: 12px; background: linear-gradient(180deg, var(--brand), var(--brand-2)); border:0; color:white; box-shadow: var(--ring); cursor: pointer; }
    .pillbar { display:flex; gap:8px; margin-bottom: 10px; flex-wrap: wrap; }
    .pill { padding:6px 10px; background: rgba(167,139,250,.12); border:1px solid rgba(167,139,250,.25); border-radius: 999px; font-size: 12px; color: var(--muted); }

    .bubble { padding: 12px 14px; border-radius: 14px; max-width: 85%; margin: 10px 0; }
    .bubble.user { background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); border:1px solid rgba(255,255,255,.08); align-self: flex-end; }
    .bubble.ai { background: linear-gradient(180deg, rgba(167,139,250,.15), rgba(167,139,250,.06)); border:1px solid rgba(167,139,250,.25); }
    .chat-feed { display:flex; flex-direction:column; gap: 2px; padding-top: 4px; }

    /* Settings */
    .grid { display:grid; gap:14px; }
    .field { display:grid; gap:8px; }
    .label { font-weight:700; }
    .select, .toggle, .btn { background: var(--panel); color: var(--text); border:1px solid rgba(255,255,255,.08); padding: 12px 12px; border-radius: 12px; }
    .toggle { display:flex; align-items:center; justify-content: space-between; }
    .switch { width: 48px; height:28px; border-radius:999px; background: #2a2b45; border:1px solid rgba(255,255,255,.1); position: relative; cursor: pointer; }
    .thumb { position:absolute; top:50%; left: 3px; transform: translateY(-50%); width:22px; height:22px; border-radius: 999px; background: linear-gradient(180deg, #fff, #f3edff); box-shadow: 0 4px 10px rgba(0,0,0,.25); transition:left .18s ease; }
    .switch[aria-checked="true"] { background: linear-gradient(180deg, var(--brand), var(--brand-2)); border-color: transparent; }
    .switch[aria-checked="true"] .thumb { left: 23px; }

    /* Archives */
    .archive-toolbar { display:flex; justify-content: space-between; align-items:center; margin-bottom:12px; }
    .cta { background: linear-gradient(180deg, var(--brand), var(--brand-2)); color: #fff; padding: 10px 14px; border-radius: 12px; border:0; box-shadow: var(--ring); cursor:pointer; }
    .entry { padding: 16px; border:1px solid rgba(255,255,255,.08); background: linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.02)); border-radius: 16px; margin-bottom: 12px; }
    .entry h3 { margin:0 0 8px; }
    .badge { display:inline-flex; align-items:center; font-size: 12px; background: rgba(167,139,250,.15); color: var(--text); border:1px solid rgba(167,139,250,.3); padding: 4px 8px; border-radius: 999px; }
    .delete { background: transparent; border:1px solid rgba(255,255,255,.12); color:#fda4af; border-radius: 10px; padding:6px 8px; margin-left:8px; cursor:pointer; }

    /* Helpers */
    .h1 { font-weight: 900; font-size: 34px; letter-spacing: -.02em; margin: 8px 0 12px; }
    .h2 { font-weight: 800; font-size: 20px; color: var(--muted); margin: 0 0 6px; }
    .sub { color: var(--muted); }

    /* Responsive */
    @media (min-width: 1024px) {
      .sidebar { position: sticky; transform:none; width: 320px; }
      .content { margin-left: 320px; }
      .topbar { height:72px; }
      .hamburger { display:none; }
      .page { padding: 22px; }
      .persona-grid { grid-template-columns: repeat(2, 1fr); }
    }

    /* Focus */
    :focus-visible { outline: none; box-shadow: var(--focus); }
  </style>
</head>
<body class="theme-gothic">
  <div id="app"></div>

  <script type="text/babel" data-presets="env,react,typescript">
    // Types
    type Route = 'persona' | 'chat' | 'settings' | 'archives';

    type PersonaId = 'soul' | 'code' | 'specter' | 'phantom';

    type Settings = {
      persona: PersonaId;
      style: 'dark' | 'neutral';
      abilities: { web: boolean; archives: boolean };
      theme: 'gothic' | 'kawaii' | 'mono' | 'contrast';
      ttsVoice?: string | null;
    };

    type Message = { id: string; role: 'user'|'ai'; content: string; at: number };

    type Session = { id: string; title: string; at: number; tag: string; messages: Message[] };

    // Utilities
    const ls = {
      get<T>(key: string, fallback: T): T {
        try { const v = localStorage.getItem(key); return v ? JSON.parse(v) as T : fallback; } catch { return fallback; }
      },
      set(key: string, value: any) { try { localStorage.setItem(key, JSON.stringify(value)); } catch {}
      }
    }

    const fmtTime = (ts:number) => new Date(ts).toLocaleString();
    const uuid = () => Math.random().toString(36).slice(2) + Date.now().toString(36);

    // App State
    const defaultSettings: Settings = {
      persona: 'soul',
      style: 'dark',
      abilities: { web: false, archives: true },
      theme: 'gothic',
      ttsVoice: null,
    };

    // Hash Router
    function useHashRoute(initial: Route): [Route, (r: Route) => void] {
      const [route, setRoute] = React.useState<Route>(() => {
        const h = location.hash.replace('#/','');
        return (['persona','chat','settings','archives'] as Route[]).includes(h as Route) ? (h as Route) : initial;
      });
      React.useEffect(() => {
        const onHash = () => {
          const h = location.hash.replace('#/','');
          setRoute((['persona','chat','settings','archives'] as Route[]).includes(h as Route) ? (h as Route) : initial);
        };
        window.addEventListener('hashchange', onHash);
        return () => window.removeEventListener('hashchange', onHash);
      }, []);
      const nav = (r: Route) => { location.hash = `#/${r}`; setRoute(r); };
      return [route, nav];
    }

    // Icons (inline SVG)
    const Icon = {
      chat: (props:any) => (<svg width="20" height="20" viewBox="0 0 24 24" fill="none" {...props}><path d="M4 5a3 3 0 013-3h10a3 3 0 013 3v8a3 3 0 01-3 3H9l-5 5V5z" stroke="currentColor" strokeWidth="1.8"/></svg>),
      history: (p:any) => (<svg width="20" height="20" viewBox="0 0 24 24" fill="none" {...p}><path d="M12 8v5l3 2" stroke="currentColor" strokeWidth="1.8"/><path d="M5 13a7 7 0 111.05 3.66" stroke="currentColor" strokeWidth="1.8"/><path d="M5 9v4H1" stroke="currentColor" strokeWidth="1.8"/></svg>),
      settings: (p:any) => (<svg width="20" height="20" viewBox="0 0 24 24" fill="none" {...p}><path d="M12 15.5a3.5 3.5 0 100-7 3.5 3.5 0 000 7z" stroke="currentColor" strokeWidth="1.8"/><path d="M19.4 15a1.9 1.9 0 00.38 2.1l.05.05a2.3 2.3 0 01-3.25 3.25l-.05-.05a1.9 1.9 0 00-2.1-.38 1.9 1.9 0 00-1.1 1.72V22a2.3 2.3 0 01-4.6 0v-.06a1.9 1.9 0 00-1.1-1.73 1.9 1.9 0 00-2.1.38l-.05.05A2.3 2.3 0 011.17 17l.05-.05a1.9 1.9 0 00.38-2.1 1.9 1.9 0 00-1.72-1.1H0a2.3 2.3 0 010 4.6h.06c.77-.02 1.46-.43 1.72-1.1a1.9 1.9 0 00-.38-2.1L1.17 3a2.3 2.3 0 013.25-3.25l.05.05a1.9 1.9 0 002.1.38c.63-.25 1.07-.84 1.1-1.51V-1a2.3 2.3 0 014.6 0v.06c.02.77.43 1.46 1.1 1.72a1.9 1.9 0 002.1-.38l.05-.05A2.3 2.3 0 0122.83 3l-.05.05a1.9 1.9 0 00-.38 2.1c.25.63.84 1.07 1.51 1.1H24a2.3 2.3 0 010 4.6h-.06a1.9 1.9 0 00-1.72 1.1z" opacity=".2" fill="currentColor"/></svg>),
      skull: (p:any) => (<svg width="20" height="20" viewBox="0 0 24 24" fill="none" {...p}><path d="M12 2a8 8 0 00-8 8c0 3.3 2 6.1 4.9 7.3V20a2 2 0 002 2h2.2a2 2 0 002-2v-2.7C18 16.1 20 13.3 20 10a8 8 0 00-8-8z" stroke="currentColor" strokeWidth="1.8"/><circle cx="9" cy="11" r="1.6" fill="currentColor"/><circle cx="15" cy="11" r="1.6" fill="currentColor"/></svg>),
      send: (p:any) => (<svg width="20" height="20" viewBox="0 0 24 24" fill="none" {...p}><path d="M22 2L11 13" stroke="currentColor" strokeWidth="1.8"/><path d="M22 2l-7 20-4-9-9-4 20-7z" stroke="currentColor" strokeWidth="1.8"/></svg>),
      mic: (p:any) => (<svg width="20" height="20" viewBox="0 0 24 24" fill="none" {...p}><rect x="9" y="2" width="6" height="12" rx="3" stroke="currentColor" strokeWidth="1.6"/><path d="M5 10a7 7 0 0014 0M12 17v5" stroke="currentColor" strokeWidth="1.6"/></svg>)
    }

    // Voice helpers (graceful degradation)
    function speak(text: string, voiceName?: string|null) {
      if (!('speechSynthesis' in window)) return;
      const msg = new SpeechSynthesisUtterance(text);
      if (voiceName) {
        const voice = speechSynthesis.getVoices().find(v => v.name === voiceName);
        if (voice) msg.voice = voice;
      }
      msg.rate = 1.02; msg.pitch = 1.0; msg.volume = 1.0;
      window.speechSynthesis.speak(msg);
    }

    function useSpeechToText() {
      const [listening, setListening] = React.useState(false);
      const Recognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      const recRef = React.useRef<any>(null);
      React.useEffect(() => { if (Recognition) recRef.current = new Recognition(); }, []);
      const start = (onText:(t:string)=>void) => {
        if (!recRef.current) return;
        const r = recRef.current; r.continuous = false; r.interimResults = false; r.lang = 'en-US';
        r.onresult = (e:any) => { const t = e.results[0][0].transcript; onText(t); setListening(false); }
        r.onend = () => setListening(false);
        try { r.start(); setListening(true); } catch { setListening(false); }
      };
      return { listening, start };
    }

    // App Component
    function App(){
      const [route, nav] = useHashRoute('persona');
      const [sidebarOpen, setSidebarOpen] = React.useState(false);
      const [settings, setSettings] = React.useState<Settings>(() => ls.get('gravewire.settings', defaultSettings));
      const [sessions, setSessions] = React.useState<Session[]>(() => ls.get('gravewire.sessions', [] as Session[]));

      React.useEffect(() => { ls.set('gravewire.settings', settings); document.body.className = `theme-${settings.theme === 'contrast' ? 'contrast' : settings.theme}`; }, [settings]);
      React.useEffect(() => { ls.set('gravewire.sessions', sessions); }, [sessions]);

      const currentTag = settings.persona === 'soul' ? 'coding teacher' : settings.persona === 'code' ? 'dev' : settings.persona === 'specter' ? 'researcher' : 'automator';

      // Start a new chat session if none exists
      React.useEffect(() => {
        if (!sessions.length) newSeance();
      }, []);

      function newSeance(){
        const id = uuid();
        const s: Session = { id, title: 'New séance', at: Date.now(), tag: currentTag, messages: [] };
        setSessions(v => [s, ...v]);
        nav('chat');
      }

      function updateSession(id:string, updater:(s:Session)=>Session){
        setSessions(list => list.map(s => s.id === id ? updater(s) : s));
      }

      // UI pieces
      const Sidebar = () => (
        <aside className={"sidebar " + (sidebarOpen ? 'open' : '')} aria-label="Sidebar">
          <div className="sidebar-header">
            <div className="logo" aria-hidden>
              <span>🪦</span>
            </div>
            <div>
              <div style={{fontWeight:900, fontSize:18}}><span className="brand-wordmark">GraveWire.ai</span></div>
              <div style={{color:'#8e83c9', fontWeight:600, fontSize:12}}>Digital Necromancy</div>
            </div>
          </div>
          <div className="sidebar-section">
            <h4>Navigation</h4>
            <a className={'side-link ' + (route==='chat'?'active':'')} href="#/chat" onClick={()=>setSidebarOpen(false)}>{Icon.chat({})}<span>Chat</span></a>
            <a className={'side-link ' + (route==='archives'?'active':'')} href="#/archives" onClick={()=>setSidebarOpen(false)}>{Icon.history({})}<span>History</span></a>
            <a className={'side-link ' + (route==='settings'?'active':'')} href="#/settings" onClick={()=>setSidebarOpen(false)}>{Icon.settings({})}<span>Settings</span></a>
          </div>
          <div className="sidebar-section">
            <h4>Underground Knowledge</h4>
            <div className="side-link">{Icon.skull({})}<span>Active Souls</span><span style={{marginLeft:'auto'}}>∞</span></div>
            <div className="side-link"><span style={{width:20, textAlign:'center'}}>🎸</span><span>Music Oracle</span></div>
            <div className="side-link"><span className="badge" style={{marginLeft:'auto', color:'#10b981', borderColor:'rgba(34,197,94,.35)', background:'rgba(34,197,94,.12)'}}>FREE</span><span style={{marginLeft:8}}>DIY Forever</span></div>
          </div>
          <div className="sidebar-user">
            <div className="avatar">U</div>
            <div>
              <div style={{fontWeight:800}}>User</div>
              <div style={{color:'#8e83c9'}}>Digital Necromancer</div>
            </div>
          </div>
        </aside>
      );

      const Topbar = () => (
        <header className="topbar">
          <button className="hamburger" aria-label="Open menu" onClick={()=>setSidebarOpen(v=>!v)}>
            <div style={{width:18, height:2, background:'white', boxShadow:'0 6px 0 white, 0 -6px 0 white'}}/>
          </button>
          <a className="brand" href="#/persona">
            <div className="glyph">🪦</div>
            <div>
              <div className="brand-title"><span className="brand-wordmark">GraveWire.ai</span></div>
              <div className="brand-sub">Digital Necromancy</div>
            </div>
          </a>
        </header>
      );

      const PersonaPicker = () => {
        const items: {id:PersonaId; title:string; blurb:string; icon:string}[] = [
          { id:'soul', title:'Soul Guide', blurb:'Ethereal wisdom for mortal queries', icon:'💬' },
          { id:'code', title:'Code Wraith', blurb:'Python & JavaScript from the digital underground', icon:'</>' },
          { id:'specter', title:'Knowledge Specter', blurb:'Research that transcends mainstream knowledge', icon:'🔎' },
          { id:'phantom', title:'Phantom Automaton', blurb:'Haunt forms and automate the mundane', icon:'⚡' },
        ];
        return (
          <section className="page">
            <div className="h1">Choose Your AI Persona</div>
            <div className="persona-grid">
              {items.map(it => (
                <div key={it.id} className="persona-card" role="button" aria-selected={settings.persona===it.id}
                     onClick={()=>setSettings(s=>({...s, persona: it.id}))}>
                  <div className="persona-icon" aria-hidden>{it.icon}</div>
                  <div>
                    <div className="persona-title">{it.title}</div>
                    <div className="persona-sub">{it.blurb}</div>
                  </div>
                </div>
              ))}
            </div>
            <div className="card" style={{marginTop:16}}>
              <div className="card-body sub">GraveWire.ai channels knowledge from beyond. Messages may contain otherworldly wisdom.</div>
            </div>
            <div className="composer" style={{marginTop: 18}}>
              <div className="page" style={{paddingTop:0}}>
                <ChatComposer sessions={sessions} setSessions={setSessions} settings={settings} />
              </div>
            </div>
          </section>
        );
      };

      const Chat = () => {
        const s = sessions[0];
        return (
          <section className="page">
            <div className="h1">Chat</div>
            <div className="pillbar">
              <span className="pill">Persona: {settings.persona}</span>
              {settings.abilities.web && <span className="pill">Web</span>}
              {settings.abilities.archives && <span className="pill">Auto-archive</span>}
            </div>
            <div className="card">
              <div className="card-body">
                <div className="chat-feed">
                  {s && s.messages.length === 0 && (
                    <div className="bubble ai">Welcome, seeker. Whisper your query and I shall consult the ether.</div>
                  )}
                  {s && s.messages.map(m => (
                    <div key={m.id} className={"bubble " + (m.role==='user'?'user':'ai')}>{m.content}</div>
                  ))}
                </div>
                <div className="composer" style={{position:'static', background:'transparent', padding:0}}>
                  <ChatComposer sessions={sessions} setSessions={setSessions} settings={settings} />
                </div>
              </div>
            </div>
          </section>
        );
      };

      const SettingsPage = () => (
        <section className="page">
          <div className="h1">Arcane Configuration</div>
          <div className="grid" style={{gridTemplateColumns:'1fr'}}>
            <div className="card"><div className="card-body">
              <div className="h2">Spectral Preferences</div>
              <div className="field">
                <div className="label">Default Spirit Guide</div>
                <select className="select" value={settings.persona} onChange={e=>setSettings(s=>({...s, persona: e.target.value as PersonaId}))}>
                  <option value="soul">Soul Guide</option>
                  <option value="code">Code Wraith</option>
                  <option value="specter">Knowledge Specter</option>
                  <option value="phantom">Phantom Automaton</option>
                </select>
              </div>
              <div className="field">
                <div className="label">Ethereal Communication Style</div>
                <select className="select" value={settings.style} onChange={e=>setSettings(s=>({...s, style: e.target.value as any}))}>
                  <option value="dark">Dark & Mystical</option>
                  <option value="neutral">Neutral & Direct</option>
                </select>
              </div>
            </div></div>

            <div className="card"><div className="card-body">
              <div className="h2">Supernatural Abilities</div>
              <div className="toggle">
                <div>
                  <div className="label">Ethereal Sight</div>
                  <div className="sub">Pierce the veil of information (Internet search for Knowledge Specter)</div>
                </div>
                <div role="switch" aria-checked={settings.abilities.web}
                     className="switch" onClick={()=>setSettings(s=>({...s, abilities:{...s.abilities, web:!s.abilities.web}}))}>
                  <div className="thumb"/>
                </div>
              </div>
              <div className="toggle" style={{marginTop:10}}>
                <div>
                  <div className="label">Archive Séances</div>
                  <div className="sub">Automatically preserve conversations in the ethereal archives</div>
                </div>
                <div role="switch" aria-checked={settings.abilities.archives}
                     className="switch" onClick={()=>setSettings(s=>({...s, abilities:{...s.abilities, archives:!s.abilities.archives}}))}>
                  <div className="thumb"/>
                </div>
              </div>
            </div></div>

            <div className="card"><div className="card-body">
              <div className="h2">Theme Editor</div>
              <div className="field">
                <div className="label">Preset Palette</div>
                <select className="select" value={settings.theme} onChange={e=>setSettings(s=>({...s, theme: e.target.value as any}))}>
                  <option value="gothic">Gothic</option>
                  <option value="kawaii">Kawaii</option>
                  <option value="mono">Monochrome</option>
                  <option value="contrast">High-Contrast</option>
                </select>
              </div>
            </div></div>
          </div>
        </section>
      );

      const ArchivesPage = () => (
        <section className="page">
          <div className="archive-toolbar">
            <div>
              <div className="h1">Ethereal Archives</div>
              <div className="sub">Browse your conversations from beyond</div>
            </div>
            <button className="cta" onClick={newSeance}>New Séance</button>
          </div>
          {sessions.map(s => (
            <div key={s.id} className="entry">
              <h3>{s.title}</h3>
              <div className="sub" style={{display:'flex', alignItems:'center', gap:8}}>
                <span>📅 {fmtTime(s.at)}</span>
                <span className="badge">{s.tag || 'researcher'}</span>
                <button className="delete" onClick={()=>setSessions(list=>list.filter(x=>x.id!==s.id))}>delete</button>
              </div>
              <div style={{marginTop:10}}>
                {s.messages[0] ? (
                  <div>
                    <b>You:</b> {s.messages.find(m=>m.role==='user')?.content?.slice(0, 120) || '—'}
                  </div>
                ) : <div className="sub">No messages yet.</div>}
              </div>
            </div>
          ))}
        </section>
      );

      function ChatComposer({sessions, setSessions, settings}:{sessions:Session[]; setSessions:Function; settings:Settings}){
        const [text, setText] = React.useState('');
        const { listening, start } = useSpeechToText();
        const sid = sessions[0]?.id;

        function send(msg?: string){
          const content = (msg ?? text).trim();
          if (!content || !sid) return;
          setText('');
          setSessions((list:Session[]) => list.map(s => s.id===sid ? ({...s, title: s.title==='New séance'? content.slice(0,40): s.title, at: Date.now(), tag: s.tag || 'researcher', messages:[...s.messages, {id:uuid(), role:'user', content, at:Date.now()}]}) : s));
          // Ghost reply (placeholder)
          const reply = `Ah, seeker, your words echo: “${content}”. The living backend has yet to be bound here, but the ritual is ready.`;
          setTimeout(() => {
            setSessions((list:Session[]) => list.map(s => s.id===sid ? ({...s, messages:[...s.messages, {id:uuid(), role:'ai', content: reply, at:Date.now()}]}) : s));
            if (settings.style==='dark') speak(reply, settings.ttsVoice || null);
          }, 300);
        }

        function onKey(e:React.KeyboardEvent<HTMLInputElement>){
          if (e.key==='Enter' && !e.shiftKey) { e.preventDefault(); send(); }
        }

        return (
          <div>
            <div className="pillbar">
              <span className="pill">Speak into the void… (Enter to send, Shift+Enter for new line)</span>
              <span className="pill" title="TTS/voice">Voice {listening?'• listening':''}</span>
            </div>
            <div className="composer-inner">
              <input className="input" placeholder="Speak into the void…" value={text} onChange={e=>setText(e.target.value)} onKeyDown={onKey} />
              <button className="send" aria-label="Send" onClick={()=>send()}>{Icon.send({})}</button>
              <button className="send" aria-label="Dictate" onClick={()=>start((t)=>{ setText(t); send(t); })}>{Icon.mic({})}</button>
            </div>
          </div>
        );
      }

      // Render
      return (
        <div className="app-shell">
          <Sidebar />
          <div className="content">
            <Topbar />
            {route==='persona' && <PersonaPicker />}
            {route==='chat' && <Chat />}
            {route==='settings' && <SettingsPage />}
            {route==='archives' && <ArchivesPage />}
          </div>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('app')!).render(<App/>);
  </script>
</body>
</html>
